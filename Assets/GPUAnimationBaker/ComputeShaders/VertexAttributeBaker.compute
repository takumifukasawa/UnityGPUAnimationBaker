// Each #kernel tells which function to compile; you can have many kernels
#pragma kernel CSMain

struct VertexAttributes
{
    float3 position;
    float3 normal;
    float3 tangent;
};

// Create a RenderTexture with enableRandomWrite flag and set it
// with cs.SetTexture
RWTexture2D<float4> OutPosition;
RWTexture2D<float4> OutNormal;
RWTexture2D<float4> OutTangent;
StructuredBuffer<VertexAttributes> InputData;

int TextureWidth;
int VertexCount;

[numthreads(1,1,1)]
void CSMain (uint2 id : SV_DispatchThreadID)
{
    // int index = id.y * VertexCount + id.x;
    int index = id.y * TextureWidth + id.x;
    VertexAttributes OutputData = InputData[index];
    float2 uv = id.xy;

    OutPosition[uv] = float4(OutputData.position, 1.0);
    // OutPosition[uv] = float4(id.xy / float2(256, 128), 1, 1);

    OutNormal[uv] = float4(OutputData.normal, 1.0);
    OutTangent[uv] = float4(OutputData.tangent, 1.0);

    //OutTangent[uv] = float4((float)id.y / 16, 0, 0, 1);
}
